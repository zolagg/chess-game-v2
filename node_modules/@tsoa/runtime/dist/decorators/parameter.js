"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Body = Body;
exports.BodyProp = BodyProp;
exports.Request = Request;
exports.RequestProp = RequestProp;
exports.Path = Path;
exports.Query = Query;
exports.Queries = Queries;
exports.Header = Header;
exports.Inject = Inject;
exports.UploadedFile = UploadedFile;
exports.UploadedFiles = UploadedFiles;
exports.FormField = FormField;
exports.Consumes = Consumes;
/**
 * Inject http Body
 *  @param {string} [name] properties name in body object
 */
function Body() {
    return () => {
        return;
    };
}
/**
 * Inject value from body
 *
 * @param {string} [name] The name of the body parameter
 */
function BodyProp(name) {
    return () => {
        return;
    };
}
/**
 * Inject http request
 */
function Request() {
    return () => {
        return;
    };
}
/**
 * Inject value from request
 *
 * @param {name} [name] The name of the request parameter
 */
function RequestProp(name) {
    return () => {
        return;
    };
}
/**
 * Inject value from Path
 *
 * @param {string} [name] The name of the path parameter
 */
function Path(name) {
    return () => {
        return;
    };
}
/**
 * Inject value from query string
 *
 * @param {string} [name] The name of the query parameter
 */
function Query(name) {
    return () => {
        return;
    };
}
/**
 * Inject all query values in a single object
 */
function Queries() {
    return () => {
        return;
    };
}
/**
 * Inject value from Http header
 *
 * @param {string} [name] The name of the header parameter
 */
function Header(name) {
    return () => {
        return;
    };
}
/**
 * Mark parameter as manually injected, which will not be generated
 */
function Inject() {
    return () => {
        return;
    };
}
/**
 * Inject uploaded file
 *
 * @param {string} [name] The name of the uploaded file parameter
 */
function UploadedFile(name) {
    return () => {
        return;
    };
}
/**
 * Inject uploaded files
 *
 * @param {string} [name] The name of the uploaded files parameter
 */
function UploadedFiles(name) {
    return () => {
        return;
    };
}
/**
 * Inject uploaded files
 *
 * @param {string} [name] The name of the uploaded files parameter
 */
function FormField(name) {
    return () => {
        return;
    };
}
/**
 * Overrides the default media type of request body.
 * Can be used on specific method.
 * Can't be used on controller level.
 *
 * @link https://swagger.io/docs/specification/describing-request-body/
 */
function Consumes(value) {
    return () => {
        return;
    };
}
//# sourceMappingURL=parameter.js.map